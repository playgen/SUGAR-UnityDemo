<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PlayGen.SUGAR.Contracts</name>
    </assembly>
    <members>
        <member name="T:PlayGen.SUGAR.Contracts.AccountRequest">
            <summary>
            Encapsulates log-in details.
            </summary>
            <example>
            JSON
            {
            Name : "User Name",
            Password : "Their Password",
            AutoLogin : true
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.AccountRequest.Name">
            <summary>
            The user's log-in name.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.AccountRequest.Password">
            <summary>
            The user's password.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.AccountRequest.AutoLogin">
            <summary>
            Whether the user will be logged in upon registering.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.AccountResponse">
            <summary>
            Encapsulates user and token details at log-in.
            </summary>
            <example>
            JSON
            {
            User : {
            Id : 1,
            Name : "User Name"
            }
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.AccountResponse.User">
            <summary>
            ActorResponse object containing the user details.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.AchievementCriteria">
            <summary>
            Encapsulates requirements for completing an achievement or skill.
            </summary>
            <example>
            JSON
            {
            Key : "GameData Key",
            DataType : "String",
            CriteriaQueryType : "Any",
            ComparisonType : "Equals",
            Scope : "Actor",
            Value : "GameData Key Value"
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.AchievementCriteria.Key">
            <summary>
            The key which will be queried against to check if criteria is met.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.AchievementCriteria.DataType">
            <summary>
            GameDataType of the key which is being queried.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.AchievementCriteria.CriteriaQueryType">
            <summary>
            Which stored GameData will be queried.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.AchievementCriteria.ComparisonType">
            <summary>
            How the target value and the actual value will be compared.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.AchievementCriteria.Scope">
            <summary>
            Whether the criteria will be checked against the actor or related actors (i.e. group members, user friends).
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.AchievementCriteria.Value">
            <summary>
            The value which will compared against in order to see if the criteria has been met.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.AchievementProgressResponse">
            <summary>
            Encapsulates current progress to completing an achievement.
            </summary>
            <example>
            JSON
            {
            Actor : [{
            Id : 1,
            Name : "Name"
            }],
            Name : "Achievement Unlocked",
            Progress : 0
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.AchievementProgressResponse.Actor">
            <summary>
            The details of the actor whose progress was being checked.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.AchievementProgressResponse.Name">
            <summary>
            The name of the achievement/skill which progress was being checked for.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.AchievementProgressResponse.Progress">
            <summary>
            Progress of current achievement/skill [0 to 1].
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.AchievementRequest">
            <summary>
            Encapsulates achievement/skill details.
            </summary>
            <example>
            JSON
            {
            Token : "AN_ACHIEVEMENT_TOKEN",
            GameId : 1,
            Name : "Achievement Unlocked",
            Description : "Fulfil the criteria to get the reward",
            ActorType : "User",
            CompletionCriteria : [{
            Key : "Criteria Key",
            DataType : "Long",
            CriteriaQueryType : "Any",
            ComparisonType : "Equals",
            Scope : "Actor",
            Value : "5"
            }],
            Reward : [{
            Key : "Reward Key",
            DataType : "Float",
            Value : "10.5"
            }]
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.AchievementRequest.Token">
            <summary>
            A unique identifier used in development to reference the achievement/skill.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.AchievementRequest.GameId">
            <summary>
            The ID of the Game which this achievement/skill should belong to. Can be left null to make the achievement/skill system-wide.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.AchievementRequest.Name">
            <summary>
            The display name for the achievement/skill.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.AchievementRequest.Description">
            <summary>
            The description of the achievement/skill.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.AchievementRequest.ActorType">
            <summary>
            The type of actor which this achievement/skill is intended to be completed by.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.AchievementRequest.CompletionCriteria">
            <summary>
            A list of criteria which will be checked in order to see if an actor has completed the achievement/skill.
            Must contain at least one criteria.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.AchievementRequest.Reward">
            <summary>
            A list of rewards that will be provided to the actor upon completion of the achievement/skill criteria.
            An achievement does not need to contain a reward.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.AchievementResponse">
            <summary>
            Encapsulates achievement/skill details returned from the server.
            </summary>
            <example>
            JSON
            {
            Token : "AN_ACHIEVEMENT_TOKEN",
            GameId : 1,
            Name : "Achievement Unlocked",
            Description : "Fulfil the criteria to get the reward",
            ActorType : "User",
            CompletionCriteria : [{
            Key : "Criteria Key",
            DataType : "Long",
            CriteriaQueryType : "Any",
            ComparisonType : "Equals",
            Scope : "Actor",
            Value : "5"
            }],
            Reward : [{
            Key : "Reward Key",
            DataType : "Float",
            Value : "10.5"
            }]
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.AchievementResponse.Token">
            <summary>
            A unique identifier used in development to reference the achievement/skill.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.AchievementResponse.GameId">
            <summary>
            The ID of the Game which this achievement/skill belongs to.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.AchievementResponse.Name">
            <summary>
            The display name for the achievement/skill.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.AchievementResponse.Description">
            <summary>
            The description of the achievement/skill.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.AchievementResponse.ActorType">
            <summary>
            The type of actor which this achievement/skill is intended to be completed by.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.AchievementResponse.CompletionCriteria">
            <summary>
            A list of criteria which is checked in order to see if an actor has completed the achievement/skill.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.AchievementResponse.Reward">
            <summary>
            A list of rewards that is provided to the actor upon completion of the achievement/skill criteria.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.ActorRequest">
            <summary>
            Encapsulates user and group details.
            </summary>
            <example>
            JSON
            {
            Name : "Actor Name"
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.ActorRequest.Name">
            <summary>
            The display name of the user/group.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.ActorResponse">
            <summary>
            Encapsulates user and group details from the server.
            </summary>
            <example>
            JSON
            {
            Id : 1,
            Name : "Actor Name"
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.ActorResponse.Id">
            <summary>
            The unqiue identifier for the user/group.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.ActorResponse.Name">
            <summary>
            The display name of the user/group.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.ActorType">
            <summary>
            Enum for selecting the target type of actor.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Contracts.ActorType.Undefined">
            <summary>
            Intended for either Users or Groups.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Contracts.ActorType.User">
            <summary>
            Intended for just Users.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Contracts.ActorType.Group">
            <summary>
            Intended for just Groups.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.ComparisonType">
            <summary>
            Enum for selecting target comparison between current value and target value.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Contracts.ComparisonType.Equals">
            <summary>
            Current and target are equal in value.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Contracts.ComparisonType.NotEqual">
            <summary>
            Current and target are not equal in value.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Contracts.ComparisonType.Greater">
            <summary>
            Current is greater in value than the target.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Contracts.ComparisonType.GreaterOrEqual">
            <summary>
            Current is greater than or equal to the value of the target.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Contracts.ComparisonType.Less">
            <summary>
            Current is less than the value of the target.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Contracts.ComparisonType.LessOrEqual">
            <summary>
            Current is less than or equal to the value of the target.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.CriteriaQueryType">
            <summary>
            Enum for selecting what values will be used to query if criteria is met.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Contracts.CriteriaQueryType.Any">
            <summary>
            Check if any singular piece of GameData matches the criteria.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Contracts.CriteriaQueryType.Sum">
            <summary>
            Check if a sum of all GameData for that key matches the crteria (Long and Float only).
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Contracts.CriteriaQueryType.Latest">
            <summary>
            Check if the most recent piece of GameData matches the criteria.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.CriteriaScope">
            <summary>
            Enum for selecting if GameData is to checked against just the actor in question or other actors relating to them (i.e. group members)
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Contracts.CriteriaScope.Actor">
            <summary>
            Test the criteria against the specified actor
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Contracts.CriteriaScope.RelatedActors">
            <summary>
            Test the criteria against the specified actors relations
            ie. a users friends, or a groups members
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.GameDataRequest">
            <summary>
            Encapsulates GameData details.
            </summary>
            <example>
            JSON
            {
            ActorId : 1,
            GameId : 1,
            Key : "Data Key",
            Value : "10",
            GameDataType : "Long"
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.GameDataRequest.ActorId">
            <summary>
            The id of the Actor which this GameData is being ensigned to. Can be left null to ensign to the system/game.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.GameDataRequest.GameId">
            <summary>
            The id of the Game which this GameData relates to. Can be left null to relate the GameData to the wider system.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.GameDataRequest.Key">
            <summary>
            The identifier of the data being stored.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.GameDataRequest.Value">
            <summary>
            The value of the data being stored.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.GameDataRequest.GameDataType">
            <summary>
            The type of data which is being stored.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.GameDataResponse">
            <summary>
            Encapsulates GameData details from the server.
            </summary>
            <example>
            JSON
            {
            ActorId : 1,
            GameId : 1,
            Key : "Data Key",
            Value : "10",
            GameDataType : "Long"
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.GameDataResponse.ActorId">
            <summary>
            The id of the Actor which this GameData relates to.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.GameDataResponse.GameId">
            <summary>
            The id of the Game which this GameData relates to.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.GameDataResponse.Key">
            <summary>
            The identifier of the data.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.GameDataResponse.Value">
            <summary>
            The value of the data.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.GameDataResponse.GameDataType">
            <summary>
            The type of the value for this data.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.GameDataType">
            <summary>
            Enum for selecting the type of data being stored or looked for.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Contracts.GameDataType.String">
            <summary>
            A non-numeric set of characters.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Contracts.GameDataType.Long">
            <summary>
            Numeric value with no decimal places.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Contracts.GameDataType.Float">
            <summary>
            Numeric value with decimal places.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Contracts.GameDataType.Boolean">
            <summary>
            True or false.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.GameRequest">
            <summary>
            Encapsulates game details.
            </summary>
            <example>
            JSON
            {
            Name : "Game Name"
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.GameRequest.Name">
            <summary>
            The display name for the game.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.GameResponse">
            <summary>
            Encapsulates game details from the server.
            </summary>
            <example>
            JSON
            {
            Id : 1,
            Name : "Game Name"
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.GameResponse.Id">
            <summary>
            The unqiue identifier for the game.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.GameResponse.Name">
            <summary>
            The display name of the game.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.LeaderboardFilterType">
            <summary>
            Enum for selecting subsection of users for current standings of a leaderboard.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Contracts.LeaderboardFilterType.Top">
            <summary>
            Provides standings based off the global ranking of the leaderboard.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Contracts.LeaderboardFilterType.Near">
            <summary>
            Provides standings in relation to the actorId provided. 
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Contracts.LeaderboardFilterType.Friends">
            <summary>
            Provides only the standings of those who are friends of the actorId provided.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Contracts.LeaderboardFilterType.GroupMembers">
            <summary>
            Provides only the standings of those who are members of the actorId provided.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.LeaderboardRequest">
            <summary>
            Encapsulates leaderboard details.
            </summary>
            <example>
            JSON
            {
            Token : "THE_LEADERBOARD_TOKEN",
            GameId : 1,
            Name : "Leaderboard Name",
            Key : "Key",
            ActorType : "User",
            GameDataType : "Long",
            CriteriaScope : "Actor",
            LeaderboardType : "Highest"
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.LeaderboardRequest.Token">
            <summary>
            A unique identifier used in development to reference the leaderboard.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.LeaderboardRequest.GameId">
            <summary>
            The Id of the Game which this leaderboards belongs to. Can be left null to relate this leaderboard to the system rather than a game.
            This Id is also used when gathering GameData using the Key provided.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.LeaderboardRequest.Name">
            <summary>
            The display name of the leaderboard.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.LeaderboardRequest.Key">
            <summary>
            The GameData key which is checked against in order to create the leaderboard standings.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.LeaderboardRequest.ActorType">
            <summary>
            The type of actor which this leaderboard is intended for.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.LeaderboardRequest.GameDataType">
            <summary>
            The GameDataType of the GameData being checked against.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.LeaderboardRequest.CriteriaScope">
            <summary>
            Whether the criteria will be checked against the actor or relatedactors (i.e. group members, user friends).
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.LeaderboardRequest.LeaderboardType">
            <summary>
            The method which data will be collected and sorted for this leaderboard.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.LeaderboardResponse">
            <summary>
            Encapsulates leaderboard details returned from the server.
            </summary>
            <example>
            JSON
            {
            Token : "THE_LEADERBOARD_TOKEN",
            GameId : 1,
            Name : "Leaderboard Name",
            Key : "Key",
            ActorType : "User",
            GameDataType : "Long",
            CriteriaScope : "Actor",
            LeaderboardType : "Highest"
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.LeaderboardResponse.Token">
            <summary>
            The unique identifier used in development to reference the leaderboard.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.LeaderboardResponse.GameId">
            <summary>
            The Id of the game which this leaderboard belongs to.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.LeaderboardResponse.Name">
            <summary>
            The display name of the leaderboard.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.LeaderboardResponse.Key">
            <summary>
            The GameData key which is checked against in order to create the leaderboard standings.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.LeaderboardResponse.ActorType">
            <summary>
            The type of actor which this leaderboard is intended for.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.LeaderboardResponse.GameDataType">
            <summary>
            The GameDataType of the GameData being checked against.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.LeaderboardResponse.CriteriaScope">
            <summary>
            Whether the criteria is checked against the actor or relatedactors (i.e. group members, user friends).
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.LeaderboardResponse.LeaderboardType">
            <summary>
            The method which collects data and sorts it for this leaderboard.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.LeaderboardStandingsRequest">
            <summary>
            Encapsulates leaderboard current standings request.
            </summary>
            <example>
            JSON
            {
            LeaderboardToken : "AN_ACHIEVEMENT_TOKEN",
            GameId : 1,
            ActorId : 1,
            LeaderboardFilterType : "Near",
            Limit : 10,
            Offset : 0,
            DateStart : "2016-01-01 00:00:00",
            DateEnd : "2016-12-31 23:59:59"
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.LeaderboardStandingsRequest.LeaderboardToken">
            <summary>
            The Token of the Leaderboard which the standings are being gathered for.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.LeaderboardStandingsRequest.GameId">
            <summary>
            The Id of the Game the leaderboard. Can be left null for system-wide leaderboards.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.LeaderboardStandingsRequest.ActorId">
            <summary>
            The Id of an Actor. Required for getting standings for Near, Friends (user only) and Group Members (group only)
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.LeaderboardStandingsRequest.LeaderboardFilterType">
            <summary>
            The filter for what standings will be returned.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.LeaderboardStandingsRequest.PageLimit">
            <summary>
            The maximum number of results which will be returned.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.LeaderboardStandingsRequest.PageOffset">
            <summary>
            The set of results which will be returned based on the limit.
            0 returns the first set of results for Top, Friends and Group Member and the nearest range for Near.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.LeaderboardStandingsRequest.DateStart">
            <summary>
            The earliest point which data should be collected from.
            Can be left null to set no earliest point.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.LeaderboardStandingsRequest.DateEnd">
            <summary>
            The latest point which data should be collected from.
            Can be left null to gather all data up to the present time.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.LeaderboardStandingsResponse">
            <summary>
            Encapsulates leaderboard standings details from the database.
            </summary>
            <example>
            JSON
            {
            ActorId : 1,
            ActorName : "Name",
            Value : "10",
            Ranking : 1
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.LeaderboardStandingsResponse.ActorId">
            <summary>
            The Id of the Actor.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.LeaderboardStandingsResponse.ActorName">
            <summary>
            The name of the Actor.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.LeaderboardStandingsResponse.Value">
            <summary>
            The value returned from the query for the leaderboard.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.LeaderboardStandingsResponse.Ranking">
            <summary>
            The actor's global ranking within that leaderboard.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.LeaderboardType">
            <summary>
            Enum for selecting the type and sorting order of the leaderboard being created.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Contracts.LeaderboardType.Highest">
            <summary>
            Sort by the highest GameData values for a key. Only the highest is taken for each Actor.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Contracts.LeaderboardType.Lowest">
            <summary>
            Sort by the lowest GameData values for a key. Only the lowest is taken for each Actor.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Contracts.LeaderboardType.Cumulative">
            <summary>
            Sort by the highest sum of GameData values for a key for an actor.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Contracts.LeaderboardType.Count">
            <summary>
            Sort by the highest count of a GameData key for an actor.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Contracts.LeaderboardType.Earliest">
            <summary>
            Sort by the earliest occurence of a GameData key. Only the earliest 'DateCreation' is taken for each Actor.
            </summary>
        </member>
        <member name="F:PlayGen.SUGAR.Contracts.LeaderboardType.Latest">
            <summary>
            Sort by the most recent occurence of a GameData key. Only the most recent 'DateModified' is taken for each Actor.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.RelationshipRequest">
            <summary>
            Encapsulates relationship details.
            </summary>
            <example>
            JSON
            {
            RequestorId : 1,
            AcceptorId : 2,
            AutoAccept : true
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.RelationshipRequest.RequestorId">
            <summary>
            The Id of the requesting actor.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.RelationshipRequest.AcceptorId">
            <summary>
            The Id of the receiving actor.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.RelationshipRequest.AutoAccept">
            <summary>
            Whether the request should be automatically accepted.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.RelationshipResponse">
            <summary>
            Encapsulates relationship details from the server.
            </summary>
            <example>
            JSON
            {
            RequestorId : 1,
            AcceptorId : 2
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.RelationshipResponse.RequestorId">
            <summary>
            The Id of the requesting actor.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.RelationshipResponse.AcceptorId">
            <summary>
            The Id of the receiving actor.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.RelationshipStatusUpdate">
            <summary>
            Encapsulates relationship details, including updated status of the relationship.
            </summary>
            <example>
            JSON
            {
            RequestorId : 1,
            AcceptorId : 2,
            Accepted : true
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.RelationshipStatusUpdate.RequestorId">
            <summary>
            The Id of the requesting actor.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.RelationshipStatusUpdate.AcceptorId">
            <summary>
            The Id of the receiving actor.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.RelationshipStatusUpdate.Accepted">
            <summary>
            Whether the request was accepted or declined.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.ResourceAddRequest">
            <summary>
            Encapsulates Resource Data details.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.ResourceAddRequest.ActorId">
            <summary>
            The id of the Actor which this Resource is being ensigned to. Can be left null to ensign to the system/game.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.ResourceAddRequest.GameId">
            <summary>
            The id of the Game which this Resource relates to. Can be left null to relate the Resource to the wider system.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.ResourceAddRequest.Key">
            <summary>
            The identifier/name of the Resource.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.ResourceAddRequest.Quantity">
            <summary>
            The value of the Resource.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.ResourceResponse">
            <summary>
            Encapsulates resource details from the server.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.ResourceResponse.Id">
            <summary>
            The id of the Resource.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.ResourceResponse.ActorId">
            <summary>
            The id of the Actor which this Resource relates to.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.ResourceResponse.GameId">
            <summary>
            The id of the Game which this Resource relates to.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.ResourceResponse.Key">
            <summary>
            The identifier/name of the Resource.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.ResourceResponse.Quantity">
            <summary>
            The amount of the Resource belonging to the actor/game.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.ResourceTransferRequest">
            <summary>
            Encapsulates Resource Transfer details.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.ResourceTransferRequest.SenderActorId">
            <summary>
            The Id of the Actor who will send this Resource. Can be left null to only give/take from the current owner.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.ResourceTransferRequest.RecipientActorId">
            <summary>
            The Id of the Actor who will receive this Resource. Can be left null to only give/take from the current owner.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.ResourceTransferRequest.GameId">
            <summary>
            The Id of the Game which this Resource belongs to. Left null for system-wise resources.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.ResourceTransferRequest.Quantity">
            <summary>
            The amount of the Resource being transferred.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.ResourceTransferRequest.Key">
            <summary>
            The key of the Resource being transferred.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.ResourceTransferResponse">
            <summary>
            Encapsulates Resource Transfer details from the server.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.ResourceTransferResponse.FromResource">
            <summary>
            The new details of the Resource being transferred from.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.ResourceTransferResponse.ToResource">
            <summary>
            The new details of the Resource being transferred to.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Reward">
            <summary>
            Encapsulates the reward given for completing an achievement or skill.
            </summary>
            <example>
            JSON
            {
            Key : "Reward Key",
            DataType : "Float",
            Value : "10.5"
            }
            </example>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Reward.Key">
            <summary>
            The key which will be stored in GameData.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Reward.DataType">
            <summary>
            GameDataType of the value for this GameData.
            </summary>
        </member>
        <member name="P:PlayGen.SUGAR.Contracts.Reward.Value">
            <summary>
            The value of the GameData.
            </summary>
        </member>
        <member name="T:PlayGen.SUGAR.Contracts.Exceptions.SUGARException">
            <summary>
            Base class for SUGAR exceptions
            </summary>
        </member>
        <member name="M:PlayGen.SUGAR.Contracts.Exceptions.SUGARException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:PlayGen.SUGAR.Contracts.Exceptions.SUGARException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PlayGen.SUGAR.Contracts.Exceptions.SUGARException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:PlayGen.SUGAR.Contracts.Exceptions.SUGARException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
    </members>
</doc>
